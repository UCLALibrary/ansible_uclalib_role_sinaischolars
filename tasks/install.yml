---
- name: Download Java and Install
  yum: name=java-1.8.0-openjdk-devel.x86_64 state=present

- name: Add EPEL Repo
  yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm state=present
  when: ansible_distribution == "CentOS"

- name: Install SetupTools
  shell: wget https://bootstrap.pypa.io/ez_setup.py -O - | python

- name: Install Supervisor
  shell: easy_install supervisor

- name: Install Python libselinux to run Supervisor
  yum: name=libselinux-python.x86_64 state=present

- name: Install Supervisor init script
  copy: src=supervisor dest=/etc/init.d/supervisor owner=root group=root mode=0755

- name: Configure supervisor to start at boot
  service: name=supervisor enabled=yes

- name: Add user to run Java
  user: name=sinai state=present

- name: Install Htop
  yum: name=htop state=present

- name: Install Nmap
  yum: name=nmap state=present

- name: Install Nano
  yum: name=nano state=present

- name: Install Unzip
  yum: name=unzip state=present

- name: Install Lynx
  yum: name=lynx state=present

- name: Install GCC to compile Authbind
  yum: name=gcc.x86_64 state=present

- name: Download Authbind
  get_url:
    url=http://ftp.debian.org/debian/pool/main/a/authbind/authbind_2.1.1+nmu1.tar.gz
    dest=/tmp/authbind.tar.gz
    sha256sum=98118a7f28220b25fb43728a3a58ddc8fa58a1dd566095019bf22e213e5f4abe

- name: Unpack Authbind
  unarchive: src=/tmp/authbind.tar.gz dest=/tmp copy=no

- name: Change Authbind's Makefile prefix
  shell: sed -i -e 's|prefix=/usr/local|prefix=/usr|' "/tmp/authbind-2.1.1+nmu1/Makefile"

- name: Compile and install Authbind
  shell: make install
  args:
    chdir: /tmp/authbind-2.1.1+nmu1

- name: Configure Authbind's secure HTTP port
  copy: content="" dest=/etc/authbind/byport/443 owner=sinai mode=0500

- name: Configure Authbind's non-secure HTTP port
  copy: content="" dest=/etc/authbind/byport/80 owner=sinai mode=0500

- name: Create Sinai directory
  file: path=/opt/sinai owner=sinai mode=0700 state=directory

- name: Create Sinai logs directory
  file: path=/var/log/sinai owner=sinai mode=0700 state=directory

- name: Create Sinai conf directory
  file: path=/etc/sinai owner=sinai mode=0700 state=directory

- name: Start Sinai's Jenkins build
  script: trigger-jenkins.sh {{ jiiify_jenkins_auth }} {{ jiiify_build_token }} {{ ansible_domain }}
  no_log: True

- name: Download Sinai
  shell: wget --user=ksclarke --password={{ jiiify_jenkins_auth }} -O /opt/sinai/sinai-web-{{ sinai_version }}-exec.jar --auth-no-challenge https://jenkins.library.ucla.edu/job/sinai-web/ws/target/sinai-web-{{ sinai_version }}-exec.jar
  no_log: True

- name: Remove Sinai artifact from Jenkins server
  shell: curl -u ksclarke:{{ jiiify_jenkins_auth }} "https://jenkins.library.ucla.edu/job/sinai-web-cleanup/build?token={{ jiiify_build_token }}"
  no_log: True

- name: Set file attributes for Jar file
  file: path=/opt/sinai/sinai-web-{{ sinai_version }}-exec.jar owner=sinai mode=0600 state=file

  # Using unzip instead of unarchive because we're only unzippping one particular file
- name: Unpack Sinai supervisord.conf file
  shell: unzip -o -d /etc /opt/sinai/sinai-web-{{ sinai_version }}-exec.jar supervisord.conf

  # Using unzip instead of unarchive because we're only unzippping one particular file
- name: Unpack Sinai JSON config file
  shell: unzip -o -d /etc/sinai /opt/sinai/sinai-web-{{ sinai_version }}-exec.jar sample-config.json

- name: Reconfigure Sinai JSON config file
  script: configure-sinai.sh {{ google_oauth_id }} {{ facebook_oauth_id }}
  no_log: True

- name: Create JKS config directory
  file:
    path=/etc/letsencrypt/live/stage-sinai.library.ucla.edu
    state=directory
    group=root
    owner=root
    mode=0700
    recurse=yes

- name: Copy JKS config and create it
  copy:
    dest="{{ item.key }}"
    content="{{ item.value.content }}"
    owner="{{ item.value.owner }}"
    group="{{ item.value.group }}"
    mode="{{ item.value.mode }}"
  with_dict: jks_secret_files
  no_log: True

  # Using unzip instead of unarchive because we're only unzippping one particular file
- name: Unpack JKS generation script
  shell: unzip -o -d /opt/sinai /opt/sinai/sinai-web-{{ sinai_version }}-exec.jar letsencrypt2jks.sh
  when: ansible_domain == "library.ucla.edu" or ansible_domain == "us-west-1.compute.internal" or ansible_domain == "eu-central-1"

- name: Set permissions on script
  file: path=/opt/sinai/letsencrypt2jks.sh state=touch mode=0700
  when: ansible_domain == "library.ucla.edu" or ansible_domain == "us-west-1.compute.internal" or ansible_domain == "eu-central-1"

- name: Build JKS
  shell: /opt/sinai/letsencrypt2jks.sh stage-sinai.library.ucla.edu $(cat /etc/supervisord.conf | grep -o 'sinai.key.pass=[^"]*' | tr "=" "\n" | grep -v '^sinai')
  when: ansible_domain == "library.ucla.edu" or ansible_domain == "us-west-1.compute.internal" or ansible_domain == "eu-central-1.compute.internal"

- name: Install JKS
  shell: mv le_sinai.jks /etc/sinai/sinai.jks
  when: ansible_domain == "library.ucla.edu" or ansible_domain == "us-west-1.compute.internal" or ansible_domain == "eu-central-1.compute.internal"

- name: Set JKS permissions
  file: path=/etc/sinai/sinai.jks state=touch mode=0600 owner=sinai group=sinai
  when: ansible_domain == "library.ucla.edu" or ansible_domain == "us-west-1.compute.internal" or ansible_domain == "eu-central-1.compute.internal"

- name: Set supervisord.conf file attributes
  file: path=/etc/supervisord.conf mode=0600 state=file

- name: Set Sinai JSON config file attributes
  file: path=/etc/sinai/config.json owner=sinai mode=0600 state=file

- name: Create Supervisor log file directory
  file: path=/var/log/supervisor mode=0700 state=directory

- name: Create Supervisor log file
  copy: content="" dest=/var/log/supervisor/supervisord.log mode=0600

- name: Make sure Supervisor is running
  shell: if [ ! -e /var/run/supervisor.sock ] ; then supervisord -c /etc/supervisord.conf ; fi

- name: Restart Supervisor with new config file
  supervisorctl: name=sinai state=restarted config=/etc/supervisord.conf
